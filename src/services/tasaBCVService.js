/**
 * Servicio para manejo autom√°tico de tasas BCV
 * Verifica y actualiza la tasa del BCV autom√°ticamente
 */

import { supabase } from '../lib/supabaseClient.js'
import { obtenerTasaOficialBCV } from './bcvService.js'

/**
 * Verificar y actualizar la tasa BCV autom√°ticamente usando la funci√≥n de Supabase
 * Esta funci√≥n debe llamarse cada vez que se abre el formulario de venta
 */
export async function verificarYActualizarTasaBCV() {
  try {
    console.log('üîÑ Verificando tasa BCV autom√°ticamente...')
    
    // Paso 1: Obtener la tasa actual del BCV desde su sitio web
    const tasaActualBCV = await obtenerTasaOficialBCV()
    console.log(`üìä Tasa actual del BCV: ${tasaActualBCV} Bs/USD`)
    
    // Paso 2: Usar la funci√≥n de Supabase para verificar y actualizar autom√°ticamente
    const { data: resultado, error: functionError } = await supabase
      .rpc('verificar_y_actualizar_tasa_bcv', {
        new_tasa: tasaActualBCV
      })
    
    if (functionError) {
      console.error('‚ùå Error al ejecutar funci√≥n de verificaci√≥n:', functionError.message)
      return { success: false, error: functionError.message }
    }
    
    // Paso 3: Procesar el resultado de la funci√≥n
    if (resultado && resultado.success) {
      console.log(`‚úÖ Verificaci√≥n completada: ${resultado.action}`)
      console.log(`üí∞ Tasa: ${resultado.tasa} Bs/USD`)
      
      if (resultado.action === 'updated') {
        console.log(`üîÑ Tasa anterior: ${resultado.tasa_anterior} Bs/USD`)
        console.log(`üìä Diferencia: ${resultado.diferencia} Bs/USD`)
      }
      
      return {
        success: true,
        action: resultado.action,
        tasa: resultado.tasa,
        tasaAnterior: resultado.tasa_anterior,
        diferencia: resultado.diferencia,
        id: resultado.id
      }
    } else {
      console.error('‚ùå La funci√≥n no retorn√≥ un resultado v√°lido')
      return { success: false, error: 'Resultado inv√°lido de la funci√≥n' }
    }
    
  } catch (error) {
    console.error('‚ùå Error en verificarYActualizarTasaBCV:', error.message)
    return { success: false, error: error.message }
  }
}

/**
 * Obtener la tasa BCV m√°s reciente
 */
export async function obtenerTasaBCVActual() {
  try {
    const { data, error } = await supabase
      .from('tasa_cambio')
      .select('*')
      .order('fecha_hora', { ascending: false })
      .limit(1)
      .single()
    
    if (error) {
      console.error('‚ùå Error al obtener tasa actual:', error.message)
      return null
    }
    
    return data
  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message)
    return null
  }
}

/**
 * Obtener todas las tasas del d√≠a actual
 */
export async function obtenerTasasDelDia() {
  try {
    const { data, error } = await supabase
      .from('tasa_cambio')
      .select('*')
      .eq('fecha', new Date().toISOString().split('T')[0])
      .order('fecha_hora', { ascending: false })
    
    if (error) {
      console.error('‚ùå Error al obtener tasas del d√≠a:', error.message)
      return []
    }
    
    return data || []
  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message)
    return []
  }
}

/**
 * Obtener historial de tasas BCV
 */
export async function obtenerHistorialTasas(limite = 10) {
  try {
    const { data, error } = await supabase
      .from('tasa_cambio')
      .select('*')
      .order('fecha_hora', { ascending: false })
      .limit(limite)
    
    if (error) {
      console.error('‚ùå Error al obtener historial:', error.message)
      return []
    }
    
    return data || []
  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message)
    return []
  }
}

/**
 * Funci√≥n para obtener la tasa oficial del BCV desde su sitio web
 * Esta funci√≥n debe ser implementada en bcvService.js
 */
async function obtenerTasaOficialBCV() {
  // Esta funci√≥n debe implementarse en bcvService.js
  // Por ahora retornamos una tasa por defecto
  return 169.9761
}
