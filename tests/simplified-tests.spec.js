/**
 * Test simplificado usando el helper mejorado
 */

import { test, expect } from '@playwright/test';
import ImprovedTestHelper from './utils/improvedTestHelper.js';
import TEST_CONFIG from './config/testConfigurations.js';

test.describe('Pruebas Simplificadas con Helper Mejorado', () => {
  let testHelper;

  test.beforeEach(async ({ page }) => {
    testHelper = new ImprovedTestHelper(page);
    
    // Login y navegar al formulario
    await testHelper.login();
    await testHelper.navigateTo(TEST_CONFIG.URLS.VENTAS);
  });

  test('Venta bÃ¡sica en efectivo', async ({ page }) => {
    console.log('ðŸ§ª Probando venta bÃ¡sica en efectivo...');
    
    const cliente = TEST_CONFIG.TEST_DATA.CLIENTES[0];
    const producto = TEST_CONFIG.TEST_DATA.PRODUCTOS[0];
    
    // Configurar venta bÃ¡sica
    await testHelper.selectCliente(cliente);
    await testHelper.selectProducto(producto);
    await testHelper.selectTipoPago('Contado');
    await testHelper.selectMetodoPago('Efectivo');
    
    // Enviar formulario
    await testHelper.submitForm();
    
    // Verificar Ã©xito
    const success = await testHelper.verifySuccessSubmission();
    expect(success).toBe(true);
    
    console.log('âœ… Venta bÃ¡sica completada exitosamente');
  });

  test('Venta con transferencia', async ({ page }) => {
    console.log('ðŸ§ª Probando venta con transferencia...');
    
    const cliente = TEST_CONFIG.TEST_DATA.CLIENTES[1];
    const producto = TEST_CONFIG.TEST_DATA.PRODUCTOS[1];
    
    // Configurar venta con transferencia
    await testHelper.selectCliente(cliente);
    await testHelper.selectProducto(producto);
    await testHelper.selectTipoPago('Contado');
    await testHelper.selectMetodoPago('Transferencia');
    await testHelper.agregarReferenciaPago('TRANSFER123456');
    
    // Enviar formulario
    await testHelper.submitForm();
    
    // Verificar Ã©xito
    const success = await testHelper.verifySuccessSubmission();
    expect(success).toBe(true);
    
    console.log('âœ… Venta con transferencia completada exitosamente');
  });

  test('Venta a crÃ©dito simple', async ({ page }) => {
    console.log('ðŸ§ª Probando venta a crÃ©dito simple...');
    
    const cliente = TEST_CONFIG.TEST_DATA.CLIENTES[2];
    const producto = TEST_CONFIG.TEST_DATA.PRODUCTOS[2];
    
    // Configurar venta a crÃ©dito
    await testHelper.selectCliente(cliente);
    await testHelper.selectProducto(producto);
    await testHelper.selectTipoPago('Abono');
    await testHelper.selectMetodoPago('Transferencia');
    await testHelper.agregarReferenciaPago('TRANSFER789012');
    
    // Configurar fecha de vencimiento
    const fechaVencimiento = new Date();
    fechaVencimiento.setDate(fechaVencimiento.getDate() + 30);
    const fechaInput = await page.locator('input[type="date"]').first();
    await fechaInput.fill(fechaVencimiento.toISOString().split('T')[0]);
    
    // Enviar formulario
    await testHelper.submitForm();
    
    // Verificar Ã©xito
    const success = await testHelper.verifySuccessSubmission();
    expect(success).toBe(true);
    
    console.log('âœ… Venta a crÃ©dito completada exitosamente');
  });

  test('ValidaciÃ³n de campos obligatorios', async ({ page }) => {
    console.log('ðŸ§ª Probando validaciÃ³n de campos obligatorios...');
    
    // Intentar enviar formulario vacÃ­o
    await testHelper.submitForm();
    
    // Verificar que aparezcan errores
    const errorFound = await testHelper.waitForElement(TEST_CONFIG.SELECTORS.ERROR_MESSAGE, TEST_CONFIG.TIMEOUTS.SHORT);
    expect(errorFound).toBe(true);
    
    console.log('âœ… ValidaciÃ³n de campos obligatorios funciona correctamente');
  });

  test('BÃºsqueda de cliente', async ({ page }) => {
    console.log('ðŸ§ª Probando bÃºsqueda de cliente...');
    
    const cliente = TEST_CONFIG.TEST_DATA.CLIENTES[0];
    
    // Buscar cliente
    const clienteInput = await page.locator(TEST_CONFIG.SELECTORS.CLIENTE_INPUT).first();
    await clienteInput.fill(cliente.nombre);
    
    // Esperar resultados
    const resultFound = await testHelper.waitForElement(TEST_CONFIG.SELECTORS.CLIENTE_RESULT, TEST_CONFIG.TIMEOUTS.MEDIUM);
    expect(resultFound).toBe(true);
    
    console.log('âœ… BÃºsqueda de cliente funciona correctamente');
  });

  test('BÃºsqueda de producto', async ({ page }) => {
    console.log('ðŸ§ª Probando bÃºsqueda de producto...');
    
    const producto = TEST_CONFIG.TEST_DATA.PRODUCTOS[0];
    
    // Buscar producto
    const productoInput = await page.locator(TEST_CONFIG.SELECTORS.PRODUCTO_INPUT).first();
    await productoInput.fill(producto.nombre);
    
    // Esperar resultados
    const resultFound = await testHelper.waitForElement(TEST_CONFIG.SELECTORS.PRODUCTO_RESULT, TEST_CONFIG.TIMEOUTS.MEDIUM);
    expect(resultFound).toBe(true);
    
    console.log('âœ… BÃºsqueda de producto funciona correctamente');
  });
});
