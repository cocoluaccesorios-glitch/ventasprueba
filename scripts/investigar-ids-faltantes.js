// Script para investigar qu√© pas√≥ con los IDs faltantes
import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Cargar variables de entorno
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables de entorno no configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function investigarIdsFaltantes() {
  console.log('üîç INVESTIGANDO IDs FALTANTES')
  console.log('=' .repeat(80))
  
  try {
    // IDs faltantes identificados
    const idsFaltantes = [6, 7, 9, 11, 33, 34, 35, 36, 37, 39, 41, 42, 43, 45, 46, 48, 50, 51, 52, 54, 56, 58, 59, 60, 62, 64, 66]
    
    console.log(`üìã IDs faltantes a investigar: ${idsFaltantes.length}`)
    console.log(`üìã Lista: ${idsFaltantes.join(', ')}`)
    
    // 1. Verificar si existen en la tabla pedidos
    console.log('\nüìä 1. VERIFICANDO SI EXISTEN EN TABLA PEDIDOS...')
    
    for (const id of idsFaltantes.slice(0, 10)) { // Solo los primeros 10 para no sobrecargar
      const { data: pedido, error } = await supabase
        .from('pedidos')
        .select('id, cliente_nombre, cliente_apellido, total_usd, estado_entrega, fecha_pedido')
        .eq('id', id)
        .single()
      
      if (error && error.code === 'PGRST116') {
        console.log(`   ID ${id}: ‚ùå No existe en tabla pedidos`)
      } else if (error) {
        console.log(`   ID ${id}: ‚ö†Ô∏è Error: ${error.message}`)
      } else {
        console.log(`   ID ${id}: ‚úÖ EXISTE - ${pedido.cliente_nombre} ${pedido.cliente_apellido} - $${pedido.total_usd}`)
      }
    }
    
    // 2. Verificar si existen en detalles_pedido
    console.log('\nüìä 2. VERIFICANDO SI EXISTEN EN DETALLES_PEDIDO...')
    
    for (const id of idsFaltantes.slice(0, 10)) {
      const { data: detalles, error } = await supabase
        .from('detalles_pedido')
        .select('pedido_id, nombre_producto, cantidad')
        .eq('pedido_id', id)
      
      if (error) {
        console.log(`   ID ${id}: ‚ö†Ô∏è Error: ${error.message}`)
      } else if (detalles.length > 0) {
        console.log(`   ID ${id}: ‚úÖ EXISTE en detalles_pedido - ${detalles.length} productos`)
        detalles.forEach(detalle => {
          console.log(`      - ${detalle.nombre_producto} (cantidad: ${detalle.cantidad})`)
        })
      } else {
        console.log(`   ID ${id}: ‚ùå No existe en detalles_pedido`)
      }
    }
    
    // 3. Verificar si existen en abonos
    console.log('\nüìä 3. VERIFICANDO SI EXISTEN EN ABONOS...')
    
    for (const id of idsFaltantes.slice(0, 10)) {
      const { data: abonos, error } = await supabase
        .from('abonos')
        .select('pedido_id, monto_abono_usd, metodo_pago_abono')
        .eq('pedido_id', id)
      
      if (error) {
        console.log(`   ID ${id}: ‚ö†Ô∏è Error: ${error.message}`)
      } else if (abonos.length > 0) {
        console.log(`   ID ${id}: ‚úÖ EXISTE en abonos - ${abonos.length} abonos`)
        abonos.forEach(abono => {
          console.log(`      - $${abono.monto_abono_usd} (${abono.metodo_pago_abono})`)
        })
      } else {
        console.log(`   ID ${id}: ‚ùå No existe en abonos`)
      }
    }
    
    // 4. Verificar el pedido #8 que tiene total $0
    console.log('\nüìä 4. INVESTIGANDO PEDIDO #8 (TOTAL $0)...')
    
    const { data: pedido8, error: pedido8Error } = await supabase
      .from('pedidos')
      .select('*')
      .eq('id', 8)
      .single()
    
    if (pedido8Error) {
      console.error('‚ùå Error obteniendo pedido #8:', pedido8Error)
    } else {
      console.log('‚úÖ Pedido #8 encontrado:')
      console.log(`   Cliente: ${pedido8.cliente_nombre} ${pedido8.cliente_apellido}`)
      console.log(`   Total: $${pedido8.total_usd}`)
      console.log(`   Estado: ${pedido8.estado_entrega}`)
      console.log(`   Es Abono: ${pedido8.es_abono}`)
      console.log(`   Fecha: ${pedido8.fecha_pedido}`)
      console.log(`   Subtotal: $${pedido8.subtotal_usd || 0}`)
      console.log(`   Descuento: $${pedido8.monto_descuento_usd || 0}`)
      console.log(`   IVA: $${pedido8.monto_iva_usd || 0}`)
      console.log(`   Delivery: $${pedido8.monto_delivery_usd || 0}`)
    }
    
    // Verificar detalles del pedido #8
    const { data: detalles8, error: detalles8Error } = await supabase
      .from('detalles_pedido')
      .select('*')
      .eq('pedido_id', 8)
    
    if (detalles8Error) {
      console.error('‚ùå Error obteniendo detalles del pedido #8:', detalles8Error)
    } else {
      console.log(`\nüìã Detalles del pedido #8: ${detalles8.length}`)
      if (detalles8.length > 0) {
        detalles8.forEach((detalle, index) => {
          console.log(`   ${index + 1}. ${detalle.nombre_producto}: ${detalle.cantidad} x $${detalle.precio_unitario_usd} = $${detalle.cantidad * detalle.precio_unitario_usd}`)
        })
      } else {
        console.log('   ‚ùå No tiene detalles_pedido')
      }
    }
    
    // 5. Verificar pedidos anulados
    console.log('\nüìä 5. INVESTIGANDO PEDIDOS ANULADOS...')
    
    const { data: pedidosAnulados, error: anuladosError } = await supabase
      .from('pedidos')
      .select('id, cliente_nombre, cliente_apellido, total_usd, fecha_pedido')
      .eq('estado_entrega', 'anulado')
      .order('id')
    
    if (anuladosError) {
      console.error('‚ùå Error obteniendo pedidos anulados:', anuladosError)
    } else {
      console.log(`‚úÖ Pedidos anulados encontrados: ${pedidosAnulados.length}`)
      pedidosAnulados.forEach(pedido => {
        console.log(`   Pedido #${pedido.id}: ${pedido.cliente_nombre} ${pedido.cliente_apellido} - $${pedido.total_usd} - ${pedido.fecha_pedido}`)
      })
    }
    
    // 6. Analizar el patr√≥n de gaps m√°s recientes
    console.log('\nüìä 6. ANALIZANDO GAPS RECIENTES...')
    
    const gapsRecientes = [58, 59, 60, 62, 64, 66] // Los m√°s recientes
    
    console.log(`üìã Gaps recientes: ${gapsRecientes.join(', ')}`)
    
    // Verificar si estos IDs fueron creados y luego eliminados
    for (const id of gapsRecientes) {
      // Verificar en detalles_pedido
      const { data: detalles, error: detallesError } = await supabase
        .from('detalles_pedido')
        .select('pedido_id, nombre_producto, cantidad')
        .eq('pedido_id', id)
      
      if (!detallesError && detalles.length > 0) {
        console.log(`   ID ${id}: ‚úÖ EXISTE en detalles_pedido - ${detalles.length} productos`)
        detalles.forEach(detalle => {
          console.log(`      - ${detalle.nombre_producto} (cantidad: ${detalle.cantidad})`)
        })
      } else {
        console.log(`   ID ${id}: ‚ùå No existe en detalles_pedido`)
      }
    }
    
    // 7. Verificar si hay alg√∫n patr√≥n en las fechas
    console.log('\nüìä 7. ANALIZANDO PATR√ìN TEMPORAL...')
    
    // Obtener todos los pedidos con sus fechas
    const { data: todosPedidos, error: todosError } = await supabase
      .from('pedidos')
      .select('id, fecha_pedido, estado_entrega')
      .order('fecha_pedido')
    
    if (todosError) {
      console.error('‚ùå Error obteniendo todos los pedidos:', todosError)
    } else {
      console.log(`‚úÖ Total pedidos: ${todosPedidos.length}`)
      
      // Agrupar por d√≠a
      const pedidosPorDia = {}
      todosPedidos.forEach(pedido => {
        const fecha = pedido.fecha_pedido.split('T')[0]
        if (!pedidosPorDia[fecha]) {
          pedidosPorDia[fecha] = []
        }
        pedidosPorDia[fecha].push(pedido)
      })
      
      console.log('\nüìÖ Pedidos por d√≠a:')
      Object.keys(pedidosPorDia).sort().forEach(fecha => {
        const pedidosDelDia = pedidosPorDia[fecha]
        const idsDelDia = pedidosDelDia.map(p => p.id).sort((a, b) => a - b)
        const anuladosDelDia = pedidosDelDia.filter(p => p.estado_entrega === 'anulado').length
        
        console.log(`   ${fecha}: ${pedidosDelDia.length} pedidos - IDs: ${idsDelDia.join(', ')} ${anuladosDelDia > 0 ? `(${anuladosDelDia} anulados)` : ''}`)
      })
    }
    
    // 8. Recomendaciones finales
    console.log('\nüìä 8. RECOMENDACIONES FINALES:')
    
    console.log('üîç CONCLUSIONES:')
    console.log('   1. Los gaps en IDs indican pedidos que fueron eliminados o nunca creados')
    console.log('   2. Algunos IDs pueden existir en detalles_pedido pero no en pedidos')
    console.log('   3. Esto sugiere problemas en el proceso de creaci√≥n/eliminaci√≥n')
    console.log('   4. El pedido #8 con total $0 puede ser un error de c√°lculo')
    
    console.log('\nüí° ACCIONES RECOMENDADAS:')
    console.log('   1. Revisar el c√≥digo de creaci√≥n de pedidos')
    console.log('   2. Implementar transacciones para evitar inconsistencias')
    console.log('   3. Agregar logs para rastrear eliminaciones')
    console.log('   4. Verificar si los IDs faltantes tienen datos hu√©rfanos')
    console.log('   5. Considerar limpiar datos hu√©rfanos si es necesario')
    
  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Ejecutar investigaci√≥n
investigarIdsFaltantes()
